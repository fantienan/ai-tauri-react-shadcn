//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "message")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
  pub id: String,
  #[sea_orm(column_type = "Text")]
  pub chat_id: String,
  #[sea_orm(column_type = "Text")]
  pub role: String,
  #[sea_orm(column_type = "Text")]
  pub parts: String,
  #[sea_orm(column_type = "Text")]
  pub attachments: String,
  #[sea_orm(column_type = "Text")]
  pub created_at: String,
}

impl Model {
  pub fn parse_parts(&self) -> Result<Vec<MessagePart>, String> {
    let parts: Vec<MessagePart> = serde_json::from_str(&self.parts).map_err(|e| e.to_string())?;
    Ok(parts)
  }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::chat::Entity",
    from = "Column::ChatId",
    to = "super::chat::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  Chat,
  #[sea_orm(has_many = "super::vote::Entity")]
  Vote,
}

impl Related<super::vote::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Vote.def()
  }
}

impl Related<super::chat::Entity> for Entity {
  fn to() -> RelationDef {
    super::vote::Relation::Chat.def()
  }
  fn via() -> Option<RelationDef> {
    Some(super::vote::Relation::Message.def().rev())
  }
}

impl ActiveModelBehavior for ActiveModel {}

/// 顶层枚举，根据 "type" 字段反序列化为不同变体
#[derive(Debug, Serialize, Deserialize)]
#[serde(tag = "type", rename_all = "kebab-case")]
pub enum MessagePart {
  /// 对应 {"type":"step-start"}
  StepStart,

  /// 对应 {"type":"tool-invocation", "toolInvocation": { ... }}
  #[serde(rename_all = "camelCase")]
  ToolInvocation {
    #[serde(rename = "toolInvocation")]
    data: ToolInvocationData,
  },

  /// 对应 {"type":"text", "text": "..."}
  Text { text: String },
}

/// tool-invocation 的详细内容
#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ToolInvocationData {
  pub state: String,
  pub step: u32,
  pub args: InvocationArgs,
  #[serde(rename = "toolCallId")]
  pub tool_call_id: String,
  #[serde(rename = "toolName")]
  pub tool_name: String,
  pub result: InvocationResult,
}

/// 通用的 args，字段都可选
#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct InvocationArgs {
  pub sql: Option<String>,
  pub chart_renderer_type: Option<String>,
  pub chart_type: Option<String>,
}

/// tool-invocation 中 result 字段，多种可能，用 untagged enum
#[derive(Debug, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InvocationResult {
  /// 第一次查询返回的表名列表
  TableList(Vec<TableInfo>),

  /// PRAGMA table_info 返回的列信息
  ColumnInfoList(Vec<ColumnInfo>),

  /// sqliteAnalyze 返回的分析结果
  Analysis(AnalysisResult),
}

/// 表名的结构（SELECT name FROM sqlite_master）
#[derive(Debug, Serialize, Deserialize)]
pub struct TableInfo {
  pub name: String,
}

/// PRAGMA table_info(...) 的单列信息
#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ColumnInfo {
  pub cid: u32,
  pub name: String,
  #[serde(rename = "type")]
  pub column_type: String,
  pub notnull: u8,
  pub dflt_value: Option<String>,
  pub pk: u8,
}

/// sqliteAnalyze 返回的结构
#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct AnalysisResult {
  pub data: Vec<NameValue>,
  pub title: String,
  pub description: String,
  pub summary: String,
  pub chart_renderer_type: String,
  pub chart_type: String,
}

/// 分析结果中每条数据项
#[derive(Debug, Serialize, Deserialize)]
pub struct NameValue {
  pub name: String,
  pub value: f64,
}
